# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import perfdog_pb2 as perfdog__pb2


class PerfDogServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.loginWithToken = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/loginWithToken',
                request_serializer=perfdog__pb2.Token.SerializeToString,
                response_deserializer=perfdog__pb2.UserInfo.FromString,
                )
        self.getDeviceList = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getDeviceList',
                request_serializer=perfdog__pb2.Empty.SerializeToString,
                response_deserializer=perfdog__pb2.DeviceListRsp.FromString,
                )
        self.startDeviceMonitor = channel.unary_stream(
                '/com.perfdog.proto.PerfDogService/startDeviceMonitor',
                request_serializer=perfdog__pb2.Empty.SerializeToString,
                response_deserializer=perfdog__pb2.DeviceEvent.FromString,
                )
        self.checkIos17AboveDriveUninstalled = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/checkIos17AboveDriveUninstalled',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.OptionBool.FromString,
                )
        self.initDevice = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/initDevice',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.getDeviceInfo = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getDeviceInfo',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.DeviceInfo.FromString,
                )
        self.getDeviceStatus = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getDeviceStatus',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.DeviceStatus.FromString,
                )
        self.getAppList = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getAppList',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.AppList.FromString,
                )
        self.enablePerfDataType = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/enablePerfDataType',
                request_serializer=perfdog__pb2.EnablePerfDataTypeReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.disablePerfDataType = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/disablePerfDataType',
                request_serializer=perfdog__pb2.DisablePerfDataTypeReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.getPerfDataType = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getPerfDataType',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.PerfDataTypeRet.FromString,
                )
        self.getAvailableDataType = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getAvailableDataType',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.PerfDataTypeRet.FromString,
                )
        self.setScreenShotInterval = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/setScreenShotInterval',
                request_serializer=perfdog__pb2.ScreenShotInterval.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.StartTestAppInternal = channel.unary_stream(
                '/com.perfdog.proto.PerfDogService/StartTestAppInternal',
                request_serializer=perfdog__pb2.StartTestAppReq.SerializeToString,
                response_deserializer=perfdog__pb2.PerfData.FromString,
                )
        self.StartTestSysProcessInternal = channel.unary_stream(
                '/com.perfdog.proto.PerfDogService/StartTestSysProcessInternal',
                request_serializer=perfdog__pb2.StartTestSysProcessReq.SerializeToString,
                response_deserializer=perfdog__pb2.PerfData.FromString,
                )
        self.startTestApp = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/startTestApp',
                request_serializer=perfdog__pb2.StartTestAppReq.SerializeToString,
                response_deserializer=perfdog__pb2.StartTestRet.FromString,
                )
        self.startTestSysProcess = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/startTestSysProcess',
                request_serializer=perfdog__pb2.StartTestSysProcessReq.SerializeToString,
                response_deserializer=perfdog__pb2.StartTestRet.FromString,
                )
        self.openPerfDataStream = channel.unary_stream(
                '/com.perfdog.proto.PerfDogService/openPerfDataStream',
                request_serializer=perfdog__pb2.OpenPerfDataStreamReq.SerializeToString,
                response_deserializer=perfdog__pb2.PerfData.FromString,
                )
        self.stopTest = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/stopTest',
                request_serializer=perfdog__pb2.StopTestReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.setLabel = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/setLabel',
                request_serializer=perfdog__pb2.SetLabelReq.SerializeToString,
                response_deserializer=perfdog__pb2.SetLabelRet.FromString,
                )
        self.updateLabel = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/updateLabel',
                request_serializer=perfdog__pb2.UpdateLabelReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.addNote = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/addNote',
                request_serializer=perfdog__pb2.AddNoteReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.removeNote = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/removeNote',
                request_serializer=perfdog__pb2.RemoveNoteReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.setGlobalDataUploadServer = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/setGlobalDataUploadServer',
                request_serializer=perfdog__pb2.SetDataUploadServerReq.SerializeToString,
                response_deserializer=perfdog__pb2.SetDataUploadServerRsp.FromString,
                )
        self.saveData = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/saveData',
                request_serializer=perfdog__pb2.SaveDataReq.SerializeToString,
                response_deserializer=perfdog__pb2.SaveDataRsp.FromString,
                )
        self.getDeviceCacheData = channel.unary_stream(
                '/com.perfdog.proto.PerfDogService/getDeviceCacheData',
                request_serializer=perfdog__pb2.GetDeviceCacheDataReq.SerializeToString,
                response_deserializer=perfdog__pb2.CachePerfData.FromString,
                )
        self.getDeviceCacheDataPacked = channel.unary_stream(
                '/com.perfdog.proto.PerfDogService/getDeviceCacheDataPacked',
                request_serializer=perfdog__pb2.GetDeviceCacheDataPackedReq.SerializeToString,
                response_deserializer=perfdog__pb2.CachePerfDataPacked.FromString,
                )
        self.getAppRunningProcess = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getAppRunningProcess',
                request_serializer=perfdog__pb2.GetAppRunningProcessReq.SerializeToString,
                response_deserializer=perfdog__pb2.GetAppRunningProcessRet.FromString,
                )
        self.getAppWindowsMap = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getAppWindowsMap',
                request_serializer=perfdog__pb2.GetAppWindowsMapReq.SerializeToString,
                response_deserializer=perfdog__pb2.GetAppWindowsMapRet.FromString,
                )
        self.getRunningSysProcess = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getRunningSysProcess',
                request_serializer=perfdog__pb2.Device.SerializeToString,
                response_deserializer=perfdog__pb2.GetRunningSysProcessRet.FromString,
                )
        self.updateAppInfo = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/updateAppInfo',
                request_serializer=perfdog__pb2.UpdateAppInfoReq.SerializeToString,
                response_deserializer=perfdog__pb2.UpdateAppInfoRet.FromString,
                )
        self.createTask = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/createTask',
                request_serializer=perfdog__pb2.CreateTaskReq.SerializeToString,
                response_deserializer=perfdog__pb2.CreateTaskRsp.FromString,
                )
        self.archiveCaseToTask = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/archiveCaseToTask',
                request_serializer=perfdog__pb2.ArchiveCaseToTaskReq.SerializeToString,
                response_deserializer=perfdog__pb2.ArchiveCaseToTaskRsp.FromString,
                )
        self.shareCase = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/shareCase',
                request_serializer=perfdog__pb2.ShareCaseReq.SerializeToString,
                response_deserializer=perfdog__pb2.ShareCaseRsp.FromString,
                )
        self.setPreferences = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/setPreferences',
                request_serializer=perfdog__pb2.SetPreferencesReq.SerializeToString,
                response_deserializer=perfdog__pb2.SetPreferencesRsp.FromString,
                )
        self.getRenderResolutionOfWindowUnderTest = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getRenderResolutionOfWindowUnderTest',
                request_serializer=perfdog__pb2.GetRenderResolutionReq.SerializeToString,
                response_deserializer=perfdog__pb2.GetRenderResolutionRet.FromString,
                )
        self.getCpuInfo = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getCpuInfo',
                request_serializer=perfdog__pb2.GetCpuInfoReq.SerializeToString,
                response_deserializer=perfdog__pb2.GetCpuInfoRsp.FromString,
                )
        self.setMemorySamplingFrequency = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/setMemorySamplingFrequency',
                request_serializer=perfdog__pb2.SetMemorySamplingFrequencyReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.transferFloatingWindowMessage = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/transferFloatingWindowMessage',
                request_serializer=perfdog__pb2.TransferFloatingWindowMessageReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.generateUnrealMemoryReport = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/generateUnrealMemoryReport',
                request_serializer=perfdog__pb2.UnrealMemoryReportReq.SerializeToString,
                response_deserializer=perfdog__pb2.MemoryReportData.FromString,
                )
        self.updateMemoryReportInfo = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/updateMemoryReportInfo',
                request_serializer=perfdog__pb2.UpdateMemoryReportReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.killServer = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/killServer',
                request_serializer=perfdog__pb2.Empty.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.setFloatingWindowPreferences = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/setFloatingWindowPreferences',
                request_serializer=perfdog__pb2.SetFloatingWindowPreferencesReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.getPresetNetworkProfilingTemplate = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/getPresetNetworkProfilingTemplate',
                request_serializer=perfdog__pb2.GetPresetNetworkProfilingTemplateReq.SerializeToString,
                response_deserializer=perfdog__pb2.GetPresetNetworkProfilingTemplateRsp.FromString,
                )
        self.submitUserNetworkProfilingTemplate = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/submitUserNetworkProfilingTemplate',
                request_serializer=perfdog__pb2.SubmitUserNetworkProfilingTemplateReq.SerializeToString,
                response_deserializer=perfdog__pb2.SubmitUserNetworkProfilingTemplateRsp.FromString,
                )
        self.updateUserNetworkProfilingTemplate = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/updateUserNetworkProfilingTemplate',
                request_serializer=perfdog__pb2.UpdateUserNetworkProfilingTemplateReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.deleteUserNetworkProfilingTemplate = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/deleteUserNetworkProfilingTemplate',
                request_serializer=perfdog__pb2.DeleteUserNetworkProfilingTemplateReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.changeNetworkTemplate = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/changeNetworkTemplate',
                request_serializer=perfdog__pb2.ChangeNetworkTemplateReq.SerializeToString,
                response_deserializer=perfdog__pb2.ChangeNetworkTemplateRsp.FromString,
                )
        self.addRemoteHostDevice = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/addRemoteHostDevice',
                request_serializer=perfdog__pb2.AddRemoteHostDeviceReq.SerializeToString,
                response_deserializer=perfdog__pb2.Empty.FromString,
                )
        self.checkDeviceOccupiedByOtherUsers = channel.unary_unary(
                '/com.perfdog.proto.PerfDogService/checkDeviceOccupiedByOtherUsers',
                request_serializer=perfdog__pb2.CheckDeviceOccupiedByOtherUsersReq.SerializeToString,
                response_deserializer=perfdog__pb2.CheckDeviceOccupiedByOtherUsersRsp.FromString,
                )


class PerfDogServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def loginWithToken(self, request, context):
        """Log in with the requested token
        通过申请的token登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceList(self, request, context):
        """Get a list of online devices
        获取在线设备列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDeviceMonitor(self, request, context):
        """Start a device monitor
        启动设备监听器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkIos17AboveDriveUninstalled(self, request, context):
        """Returns true if the device is ios17 or above and no driver is installed, otherwise returns false
        设备为ios17以上且未安装驱动返回true，否则返回false
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initDevice(self, request, context):
        """Initialize the device
        初始化设备
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceInfo(self, request, context):
        """Get device information
        获取设备信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceStatus(self, request, context):
        """Get device status
        获取设备状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAppList(self, request, context):
        """Get a list of device applications
        获取设备APP列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enablePerfDataType(self, request, context):
        """Enable data type
        开启数据类型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disablePerfDataType(self, request, context):
        """Disable data type
        关闭数据类型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPerfDataType(self, request, context):
        """Get a list of enabled data types
        获取已开启数据类型的列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAvailableDataType(self, request, context):
        """Get a list of available data types
        获取设备可以开启的数据项
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setScreenShotInterval(self, request, context):
        """Set the screenshot interval
        设置截屏时间间隔
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTestAppInternal(self, request, context):
        """Compatible with older versions, not recommended
        兼容旧版本，不建议使用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTestSysProcessInternal(self, request, context):
        """Compatible with older versions, not recommended
        兼容旧版本，不建议使用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTestApp(self, request, context):
        """Start test
        The data types enabled by Android by default are FPS, CPU_USAGE, MEMORY, CPU_TEMPERATURE, NETWORK_USAGE, FRAME_TIME, and BATTERY (wifi mode)
        The data types enabled by iOS by default are FPS, CPU_USAGE, MEMORY, IOS_GPU_USAGE, NETWORK_USAGE, CTX_SWITCH, FRAME_TIME (usb mode) and BATTERY (wifi mode)
        If you need to enable other data types or disable them, use the enablePerfDataType and disablePerfDataType interfaces
        开始测试
        Android默认开启的数据类型有FPS、CPU_USAGE、MEMORY、CPU_TEMPERATURE、NETWORK_USAGE、FRAME_TIME和BATTERY(wifi模式)
        iOS默认开启的数据类型有FPS、CPU_USAGE、MEMORY、IOS_GPU_USAGE、NETWORK_USAGE、CTX_SWITCH、FRAME_TIME(usb模式)和BATTERY(wifi模式)
        如果需要开启或者关闭其他数据类型，请使用enablePerfDataType和disablePerfDataType接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTestSysProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openPerfDataStream(self, request, context):
        """Get real-time test data streams from devices
        获取设备实时的测试数据流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTest(self, request, context):
        """Stop test
        结束测试
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setLabel(self, request, context):
        """set Label
        设置Label
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateLabel(self, request, context):
        """Modify the name of the label
        修改label的名字
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addNote(self, request, context):
        """add note
        添加批注
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeNote(self, request, context):
        """delete note
        删除批注
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setGlobalDataUploadServer(self, request, context):
        """Set the global data upload server, if you don't set it, it will be uploaded to PerfDog cloud platform by default.
        设置全局的数据上传服务器,不设置的情况下默认上传到PerfDog云平台
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveData(self, request, context):
        """Upload data (default upload to PerfDog cloud platform, can be modified through the setGlobalDataUploadServer interface), while saving to a local Excel file.
        上传数据(默认上传到PerfDog云平台,可通过setGlobalDataUploadServer接口修改),同时保存到本地Excel文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceCacheData(self, request, context):
        """Get the device's cached data, and return the data by item.
        获取设备的缓存数据,数据按条返回
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceCacheDataPacked(self, request, context):
        """Get the cache data of the device, pack the data into json or protobuf and return it at once.
        获取设备的缓存数据,数据打包成json或protobuf一次返回
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAppRunningProcess(self, request, context):
        """Get a list of processes running on the device for this app
        获取设备上app正在运行的进程列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAppWindowsMap(self, request, context):
        """Get the Activity and SurfaceView corresponding to each process id of the app, only for android.
        获取app每个进程id对应的Activity和SurfaceView,仅适用于android
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRunningSysProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateAppInfo(self, request, context):
        """Refresh app information, used to get the app list after the app modified the app under test (such as upgrading the version)
        刷新app的信息,用于获取完app列表后修改了被测app(例如升级了版本)的情况
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTask(self, request, context):
        """Interface on the web for creating task
        web上的创建任务接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def archiveCaseToTask(self, request, context):
        """Interface on the web for archiving cases to task
        web上的把case归档到task的接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shareCase(self, request, context):
        """Interface on the web for sharing case
        web上的分享case接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPreferences(self, request, context):
        """Set the running configuration
        设置运行配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderResolutionOfWindowUnderTest(self, request, context):
        """Get the rendering resolution of the test app, supported only for Android
        获取测试App的渲染分辨率，仅支持Android
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCpuInfo(self, request, context):
        """Get CPU core count and maximum frequency
        获取CPU核心数和最大频率
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setMemorySamplingFrequency(self, request, context):
        """Set memory sampling frequency, only for android
        设置内存采样频率,仅用于android
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transferFloatingWindowMessage(self, request, context):
        """Send the display content of the hover window, only for windows
        发送悬浮窗的显示内容，仅用于windows
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def generateUnrealMemoryReport(self, request, context):
        """Get unreal memory report
        获取 unreal memory report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateMemoryReportInfo(self, request, context):
        """Modify tag name of memory report
        修改 memory report 标签名
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def killServer(self, request, context):
        """Close PerfDogService
        关闭PerfDogService
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFloatingWindowPreferences(self, request, context):
        """Set the position and font color of the hover window for android and windows
        设置悬浮窗位置和字体颜色，用于android和windows
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPresetNetworkProfilingTemplate(self, request, context):
        """Pull default and user-created web templates
        拉取默认的和用户创建的网络模版
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def submitUserNetworkProfilingTemplate(self, request, context):
        """Submit user's web template
        提交用户的网络模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateUserNetworkProfilingTemplate(self, request, context):
        """Update user's web template
        更新用户的网络模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteUserNetworkProfilingTemplate(self, request, context):
        """Delete user's web template
        删除用户的网络模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def changeNetworkTemplate(self, request, context):
        """Modify weak network simulation parameters during testing
        用于在测试过程中修改弱网模拟参数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addRemoteHostDevice(self, request, context):
        """Add a remote host device
        添加远程控制的主机设备
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkDeviceOccupiedByOtherUsers(self, request, context):
        """Check whether the target is occupied by other users
        确认主机是否被其它用户占用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PerfDogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'loginWithToken': grpc.unary_unary_rpc_method_handler(
                    servicer.loginWithToken,
                    request_deserializer=perfdog__pb2.Token.FromString,
                    response_serializer=perfdog__pb2.UserInfo.SerializeToString,
            ),
            'getDeviceList': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceList,
                    request_deserializer=perfdog__pb2.Empty.FromString,
                    response_serializer=perfdog__pb2.DeviceListRsp.SerializeToString,
            ),
            'startDeviceMonitor': grpc.unary_stream_rpc_method_handler(
                    servicer.startDeviceMonitor,
                    request_deserializer=perfdog__pb2.Empty.FromString,
                    response_serializer=perfdog__pb2.DeviceEvent.SerializeToString,
            ),
            'checkIos17AboveDriveUninstalled': grpc.unary_unary_rpc_method_handler(
                    servicer.checkIos17AboveDriveUninstalled,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.OptionBool.SerializeToString,
            ),
            'initDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.initDevice,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'getDeviceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceInfo,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.DeviceInfo.SerializeToString,
            ),
            'getDeviceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceStatus,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.DeviceStatus.SerializeToString,
            ),
            'getAppList': grpc.unary_unary_rpc_method_handler(
                    servicer.getAppList,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.AppList.SerializeToString,
            ),
            'enablePerfDataType': grpc.unary_unary_rpc_method_handler(
                    servicer.enablePerfDataType,
                    request_deserializer=perfdog__pb2.EnablePerfDataTypeReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'disablePerfDataType': grpc.unary_unary_rpc_method_handler(
                    servicer.disablePerfDataType,
                    request_deserializer=perfdog__pb2.DisablePerfDataTypeReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'getPerfDataType': grpc.unary_unary_rpc_method_handler(
                    servicer.getPerfDataType,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.PerfDataTypeRet.SerializeToString,
            ),
            'getAvailableDataType': grpc.unary_unary_rpc_method_handler(
                    servicer.getAvailableDataType,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.PerfDataTypeRet.SerializeToString,
            ),
            'setScreenShotInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.setScreenShotInterval,
                    request_deserializer=perfdog__pb2.ScreenShotInterval.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'StartTestAppInternal': grpc.unary_stream_rpc_method_handler(
                    servicer.StartTestAppInternal,
                    request_deserializer=perfdog__pb2.StartTestAppReq.FromString,
                    response_serializer=perfdog__pb2.PerfData.SerializeToString,
            ),
            'StartTestSysProcessInternal': grpc.unary_stream_rpc_method_handler(
                    servicer.StartTestSysProcessInternal,
                    request_deserializer=perfdog__pb2.StartTestSysProcessReq.FromString,
                    response_serializer=perfdog__pb2.PerfData.SerializeToString,
            ),
            'startTestApp': grpc.unary_unary_rpc_method_handler(
                    servicer.startTestApp,
                    request_deserializer=perfdog__pb2.StartTestAppReq.FromString,
                    response_serializer=perfdog__pb2.StartTestRet.SerializeToString,
            ),
            'startTestSysProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.startTestSysProcess,
                    request_deserializer=perfdog__pb2.StartTestSysProcessReq.FromString,
                    response_serializer=perfdog__pb2.StartTestRet.SerializeToString,
            ),
            'openPerfDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.openPerfDataStream,
                    request_deserializer=perfdog__pb2.OpenPerfDataStreamReq.FromString,
                    response_serializer=perfdog__pb2.PerfData.SerializeToString,
            ),
            'stopTest': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTest,
                    request_deserializer=perfdog__pb2.StopTestReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'setLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.setLabel,
                    request_deserializer=perfdog__pb2.SetLabelReq.FromString,
                    response_serializer=perfdog__pb2.SetLabelRet.SerializeToString,
            ),
            'updateLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.updateLabel,
                    request_deserializer=perfdog__pb2.UpdateLabelReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'addNote': grpc.unary_unary_rpc_method_handler(
                    servicer.addNote,
                    request_deserializer=perfdog__pb2.AddNoteReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'removeNote': grpc.unary_unary_rpc_method_handler(
                    servicer.removeNote,
                    request_deserializer=perfdog__pb2.RemoveNoteReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'setGlobalDataUploadServer': grpc.unary_unary_rpc_method_handler(
                    servicer.setGlobalDataUploadServer,
                    request_deserializer=perfdog__pb2.SetDataUploadServerReq.FromString,
                    response_serializer=perfdog__pb2.SetDataUploadServerRsp.SerializeToString,
            ),
            'saveData': grpc.unary_unary_rpc_method_handler(
                    servicer.saveData,
                    request_deserializer=perfdog__pb2.SaveDataReq.FromString,
                    response_serializer=perfdog__pb2.SaveDataRsp.SerializeToString,
            ),
            'getDeviceCacheData': grpc.unary_stream_rpc_method_handler(
                    servicer.getDeviceCacheData,
                    request_deserializer=perfdog__pb2.GetDeviceCacheDataReq.FromString,
                    response_serializer=perfdog__pb2.CachePerfData.SerializeToString,
            ),
            'getDeviceCacheDataPacked': grpc.unary_stream_rpc_method_handler(
                    servicer.getDeviceCacheDataPacked,
                    request_deserializer=perfdog__pb2.GetDeviceCacheDataPackedReq.FromString,
                    response_serializer=perfdog__pb2.CachePerfDataPacked.SerializeToString,
            ),
            'getAppRunningProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.getAppRunningProcess,
                    request_deserializer=perfdog__pb2.GetAppRunningProcessReq.FromString,
                    response_serializer=perfdog__pb2.GetAppRunningProcessRet.SerializeToString,
            ),
            'getAppWindowsMap': grpc.unary_unary_rpc_method_handler(
                    servicer.getAppWindowsMap,
                    request_deserializer=perfdog__pb2.GetAppWindowsMapReq.FromString,
                    response_serializer=perfdog__pb2.GetAppWindowsMapRet.SerializeToString,
            ),
            'getRunningSysProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.getRunningSysProcess,
                    request_deserializer=perfdog__pb2.Device.FromString,
                    response_serializer=perfdog__pb2.GetRunningSysProcessRet.SerializeToString,
            ),
            'updateAppInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAppInfo,
                    request_deserializer=perfdog__pb2.UpdateAppInfoReq.FromString,
                    response_serializer=perfdog__pb2.UpdateAppInfoRet.SerializeToString,
            ),
            'createTask': grpc.unary_unary_rpc_method_handler(
                    servicer.createTask,
                    request_deserializer=perfdog__pb2.CreateTaskReq.FromString,
                    response_serializer=perfdog__pb2.CreateTaskRsp.SerializeToString,
            ),
            'archiveCaseToTask': grpc.unary_unary_rpc_method_handler(
                    servicer.archiveCaseToTask,
                    request_deserializer=perfdog__pb2.ArchiveCaseToTaskReq.FromString,
                    response_serializer=perfdog__pb2.ArchiveCaseToTaskRsp.SerializeToString,
            ),
            'shareCase': grpc.unary_unary_rpc_method_handler(
                    servicer.shareCase,
                    request_deserializer=perfdog__pb2.ShareCaseReq.FromString,
                    response_serializer=perfdog__pb2.ShareCaseRsp.SerializeToString,
            ),
            'setPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.setPreferences,
                    request_deserializer=perfdog__pb2.SetPreferencesReq.FromString,
                    response_serializer=perfdog__pb2.SetPreferencesRsp.SerializeToString,
            ),
            'getRenderResolutionOfWindowUnderTest': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderResolutionOfWindowUnderTest,
                    request_deserializer=perfdog__pb2.GetRenderResolutionReq.FromString,
                    response_serializer=perfdog__pb2.GetRenderResolutionRet.SerializeToString,
            ),
            'getCpuInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getCpuInfo,
                    request_deserializer=perfdog__pb2.GetCpuInfoReq.FromString,
                    response_serializer=perfdog__pb2.GetCpuInfoRsp.SerializeToString,
            ),
            'setMemorySamplingFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.setMemorySamplingFrequency,
                    request_deserializer=perfdog__pb2.SetMemorySamplingFrequencyReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'transferFloatingWindowMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.transferFloatingWindowMessage,
                    request_deserializer=perfdog__pb2.TransferFloatingWindowMessageReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'generateUnrealMemoryReport': grpc.unary_unary_rpc_method_handler(
                    servicer.generateUnrealMemoryReport,
                    request_deserializer=perfdog__pb2.UnrealMemoryReportReq.FromString,
                    response_serializer=perfdog__pb2.MemoryReportData.SerializeToString,
            ),
            'updateMemoryReportInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.updateMemoryReportInfo,
                    request_deserializer=perfdog__pb2.UpdateMemoryReportReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'killServer': grpc.unary_unary_rpc_method_handler(
                    servicer.killServer,
                    request_deserializer=perfdog__pb2.Empty.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'setFloatingWindowPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.setFloatingWindowPreferences,
                    request_deserializer=perfdog__pb2.SetFloatingWindowPreferencesReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'getPresetNetworkProfilingTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.getPresetNetworkProfilingTemplate,
                    request_deserializer=perfdog__pb2.GetPresetNetworkProfilingTemplateReq.FromString,
                    response_serializer=perfdog__pb2.GetPresetNetworkProfilingTemplateRsp.SerializeToString,
            ),
            'submitUserNetworkProfilingTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.submitUserNetworkProfilingTemplate,
                    request_deserializer=perfdog__pb2.SubmitUserNetworkProfilingTemplateReq.FromString,
                    response_serializer=perfdog__pb2.SubmitUserNetworkProfilingTemplateRsp.SerializeToString,
            ),
            'updateUserNetworkProfilingTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.updateUserNetworkProfilingTemplate,
                    request_deserializer=perfdog__pb2.UpdateUserNetworkProfilingTemplateReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'deleteUserNetworkProfilingTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteUserNetworkProfilingTemplate,
                    request_deserializer=perfdog__pb2.DeleteUserNetworkProfilingTemplateReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'changeNetworkTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.changeNetworkTemplate,
                    request_deserializer=perfdog__pb2.ChangeNetworkTemplateReq.FromString,
                    response_serializer=perfdog__pb2.ChangeNetworkTemplateRsp.SerializeToString,
            ),
            'addRemoteHostDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.addRemoteHostDevice,
                    request_deserializer=perfdog__pb2.AddRemoteHostDeviceReq.FromString,
                    response_serializer=perfdog__pb2.Empty.SerializeToString,
            ),
            'checkDeviceOccupiedByOtherUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.checkDeviceOccupiedByOtherUsers,
                    request_deserializer=perfdog__pb2.CheckDeviceOccupiedByOtherUsersReq.FromString,
                    response_serializer=perfdog__pb2.CheckDeviceOccupiedByOtherUsersRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.perfdog.proto.PerfDogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PerfDogService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def loginWithToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/loginWithToken',
            perfdog__pb2.Token.SerializeToString,
            perfdog__pb2.UserInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getDeviceList',
            perfdog__pb2.Empty.SerializeToString,
            perfdog__pb2.DeviceListRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDeviceMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.perfdog.proto.PerfDogService/startDeviceMonitor',
            perfdog__pb2.Empty.SerializeToString,
            perfdog__pb2.DeviceEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkIos17AboveDriveUninstalled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/checkIos17AboveDriveUninstalled',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.OptionBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/initDevice',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getDeviceInfo',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.DeviceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getDeviceStatus',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.DeviceStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAppList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getAppList',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.AppList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enablePerfDataType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/enablePerfDataType',
            perfdog__pb2.EnablePerfDataTypeReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disablePerfDataType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/disablePerfDataType',
            perfdog__pb2.DisablePerfDataTypeReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPerfDataType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getPerfDataType',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.PerfDataTypeRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAvailableDataType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getAvailableDataType',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.PerfDataTypeRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setScreenShotInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/setScreenShotInterval',
            perfdog__pb2.ScreenShotInterval.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTestAppInternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.perfdog.proto.PerfDogService/StartTestAppInternal',
            perfdog__pb2.StartTestAppReq.SerializeToString,
            perfdog__pb2.PerfData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTestSysProcessInternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.perfdog.proto.PerfDogService/StartTestSysProcessInternal',
            perfdog__pb2.StartTestSysProcessReq.SerializeToString,
            perfdog__pb2.PerfData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTestApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/startTestApp',
            perfdog__pb2.StartTestAppReq.SerializeToString,
            perfdog__pb2.StartTestRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTestSysProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/startTestSysProcess',
            perfdog__pb2.StartTestSysProcessReq.SerializeToString,
            perfdog__pb2.StartTestRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openPerfDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.perfdog.proto.PerfDogService/openPerfDataStream',
            perfdog__pb2.OpenPerfDataStreamReq.SerializeToString,
            perfdog__pb2.PerfData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/stopTest',
            perfdog__pb2.StopTestReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/setLabel',
            perfdog__pb2.SetLabelReq.SerializeToString,
            perfdog__pb2.SetLabelRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/updateLabel',
            perfdog__pb2.UpdateLabelReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/addNote',
            perfdog__pb2.AddNoteReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/removeNote',
            perfdog__pb2.RemoveNoteReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setGlobalDataUploadServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/setGlobalDataUploadServer',
            perfdog__pb2.SetDataUploadServerReq.SerializeToString,
            perfdog__pb2.SetDataUploadServerRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def saveData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/saveData',
            perfdog__pb2.SaveDataReq.SerializeToString,
            perfdog__pb2.SaveDataRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceCacheData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.perfdog.proto.PerfDogService/getDeviceCacheData',
            perfdog__pb2.GetDeviceCacheDataReq.SerializeToString,
            perfdog__pb2.CachePerfData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceCacheDataPacked(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.perfdog.proto.PerfDogService/getDeviceCacheDataPacked',
            perfdog__pb2.GetDeviceCacheDataPackedReq.SerializeToString,
            perfdog__pb2.CachePerfDataPacked.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAppRunningProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getAppRunningProcess',
            perfdog__pb2.GetAppRunningProcessReq.SerializeToString,
            perfdog__pb2.GetAppRunningProcessRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAppWindowsMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getAppWindowsMap',
            perfdog__pb2.GetAppWindowsMapReq.SerializeToString,
            perfdog__pb2.GetAppWindowsMapRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRunningSysProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getRunningSysProcess',
            perfdog__pb2.Device.SerializeToString,
            perfdog__pb2.GetRunningSysProcessRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateAppInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/updateAppInfo',
            perfdog__pb2.UpdateAppInfoReq.SerializeToString,
            perfdog__pb2.UpdateAppInfoRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/createTask',
            perfdog__pb2.CreateTaskReq.SerializeToString,
            perfdog__pb2.CreateTaskRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def archiveCaseToTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/archiveCaseToTask',
            perfdog__pb2.ArchiveCaseToTaskReq.SerializeToString,
            perfdog__pb2.ArchiveCaseToTaskRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shareCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/shareCase',
            perfdog__pb2.ShareCaseReq.SerializeToString,
            perfdog__pb2.ShareCaseRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/setPreferences',
            perfdog__pb2.SetPreferencesReq.SerializeToString,
            perfdog__pb2.SetPreferencesRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRenderResolutionOfWindowUnderTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getRenderResolutionOfWindowUnderTest',
            perfdog__pb2.GetRenderResolutionReq.SerializeToString,
            perfdog__pb2.GetRenderResolutionRet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCpuInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getCpuInfo',
            perfdog__pb2.GetCpuInfoReq.SerializeToString,
            perfdog__pb2.GetCpuInfoRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setMemorySamplingFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/setMemorySamplingFrequency',
            perfdog__pb2.SetMemorySamplingFrequencyReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transferFloatingWindowMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/transferFloatingWindowMessage',
            perfdog__pb2.TransferFloatingWindowMessageReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def generateUnrealMemoryReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/generateUnrealMemoryReport',
            perfdog__pb2.UnrealMemoryReportReq.SerializeToString,
            perfdog__pb2.MemoryReportData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateMemoryReportInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/updateMemoryReportInfo',
            perfdog__pb2.UpdateMemoryReportReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def killServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/killServer',
            perfdog__pb2.Empty.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFloatingWindowPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/setFloatingWindowPreferences',
            perfdog__pb2.SetFloatingWindowPreferencesReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPresetNetworkProfilingTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/getPresetNetworkProfilingTemplate',
            perfdog__pb2.GetPresetNetworkProfilingTemplateReq.SerializeToString,
            perfdog__pb2.GetPresetNetworkProfilingTemplateRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def submitUserNetworkProfilingTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/submitUserNetworkProfilingTemplate',
            perfdog__pb2.SubmitUserNetworkProfilingTemplateReq.SerializeToString,
            perfdog__pb2.SubmitUserNetworkProfilingTemplateRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateUserNetworkProfilingTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/updateUserNetworkProfilingTemplate',
            perfdog__pb2.UpdateUserNetworkProfilingTemplateReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteUserNetworkProfilingTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/deleteUserNetworkProfilingTemplate',
            perfdog__pb2.DeleteUserNetworkProfilingTemplateReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def changeNetworkTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/changeNetworkTemplate',
            perfdog__pb2.ChangeNetworkTemplateReq.SerializeToString,
            perfdog__pb2.ChangeNetworkTemplateRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addRemoteHostDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/addRemoteHostDevice',
            perfdog__pb2.AddRemoteHostDeviceReq.SerializeToString,
            perfdog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkDeviceOccupiedByOtherUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.perfdog.proto.PerfDogService/checkDeviceOccupiedByOtherUsers',
            perfdog__pb2.CheckDeviceOccupiedByOtherUsersReq.SerializeToString,
            perfdog__pb2.CheckDeviceOccupiedByOtherUsersRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
